<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security of Things</title>
    <link>http://gammenion.github.io/</link>
    <description>Recent content on Security of Things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Mar 2016 00:00:00 +0100</lastBuildDate>
    <atom:link href="http://gammenion.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hardening SSH of your VPS</title>
      <link>http://gammenion.github.io/post/ssh-hardening/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0100</pubDate>
      
      <guid>http://gammenion.github.io/post/ssh-hardening/</guid>
      <description>

&lt;h2 id=&#34;tl-dr:a6b9f62d776ebe461e78b63abd067512&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;VPS - Virtual Private Servers - usually comes with a ton of default settings. Here I describe how to properly secure SSH for a very simple setup, like a private VPS where I am the only user and I have full control of server and client.&lt;/p&gt;

&lt;h2 id=&#34;intro:a6b9f62d776ebe461e78b63abd067512&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;One of the things of having a VPS is to have the freedom to do whatever you want on a system that is up all the time &lt;a href=&#34;https://www.ovh.com/us/dedicated-cloud/discover/sla.xml&#34;&gt;(or most of the time)&lt;/a&gt;. I use OVH for reasons that escape me at the moment. In the end, it doesn&amp;rsquo;t matter. Wherever your VPS is, be it in Amazon AWS, Microsoft Azure, Linode or your &lt;a href=&#34;http://libertyvps.net/&#34;&gt;favourite &amp;ldquo;underground&amp;rdquo;/privacy conscious provider accepting bitcoins&lt;/a&gt;, it will not use by default the best configuration for a security minded administrator.&lt;/p&gt;

&lt;p&gt;In this day and age, SSH is the de facto standard for remote access. Good old times of telnet and 10Mbps hubs, where you could sniff everything, are over. However, doing cryptography is always a challenge, and SSH is no different.&lt;/p&gt;

&lt;p&gt;The main purpose of using SSH and a cryptographic tunnel between two computers is to protect the content being sent through the encrypted channel - also many more security features like authentication and message integrity. If this channel is compromised for any reason, bad things can happen.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&#34;http://www.coresecurity.com/content/ssh-insertion-attack&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://blog.sucuri.net/2013/07/ssh-brute-force-the-10-year-old-attack-that-still-persists.html&#34;&gt;types of&lt;/a&gt; &lt;a href=&#34;https://sites.google.com/site/clickdeathsquad/Home/cds-ssh-mitmdowngrade&#34;&gt;attacks&lt;/a&gt; that focus on the cryptography side of SSH and not to the protocol itself. Just google &amp;ldquo;SSH attacks&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Throughout this post I will show you the sources of information I collected to build my SSH configuration. I will not draw images of how SSH works, key exchange, MACs, whatever because there are already a lot of sites out there with amazing explanations. I will also not go through long explanations about cryptography- Even though it&amp;rsquo;s interesting, it&amp;rsquo;s not the point for this post.&lt;/p&gt;

&lt;p&gt;Shout out to &lt;a href=&#34;https://stribika.github.io/2015/01/04/secure-secure-shell.html&#34;&gt;stribika&amp;rsquo;s blog post&lt;/a&gt; that inspired me to do this. Although I am not doing this to protect me from a particular three letter agency who shall not be named. Security is freely available and I want to use the best. End.&lt;/p&gt;

&lt;h2 id=&#34;the-start:a6b9f62d776ebe461e78b63abd067512&#34;&gt;The Start&lt;/h2&gt;

&lt;p&gt;First of all, you need to understand one fundamental piece of information regarding SSH that I overlooked for a LONG time. Connecting one computer with another involves TWO computers. It is &lt;em&gt;not enough&lt;/em&gt; to harden only your SSH server. Please refer to the &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-fix-openssh-s-client-bug-cve-0216-0777-and-cve-0216-0778-by-disabling-useroaming&#34;&gt;CVE-0216-0777 and CVE-0216-0778&lt;/a&gt; regarding UseRoaming and also this amazing piece of work by &lt;a href=&#34;https://github.com/FiloSottile/whosthere&#34;&gt;Filippo Valsorda&lt;/a&gt; where he can identify who you are by the SSH key you use.&lt;/p&gt;

&lt;p&gt;We will start with the server configuration and move on to the client configuration. &lt;em&gt;DON&amp;rsquo;T SKIP THE CLIENT CONFIGURATION&lt;/em&gt; like I did for many years of my life.&lt;/p&gt;

&lt;h2 id=&#34;the-server:a6b9f62d776ebe461e78b63abd067512&#34;&gt;The Server&lt;/h2&gt;

&lt;p&gt;You are given a new VPS. Hurray! Do you even know what keys your SSH server is using and cryptographic options that created them? Most of them rely on automatic key generation from the openssh server package during VPS automatic provisioning, which is fair enough. The fact is that I don&amp;rsquo;t trust them enough (for SSH key creation methods, not for having the ability to access all my data and scrape my server&amp;rsquo;s memory and steal all my keys).&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;horror stories&lt;/em&gt; like &lt;a href=&#34;http://wiki.hetzner.de/index.php/Ed25519/en&#34;&gt;this one&lt;/a&gt; where Hetzner, a VPS provider, reused the same SSH server key for a number of their clients due to a configuration error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Due to an error in the installation software introduced on April 10th, 2015, the Ed25519 SSH host keys (/etc/ssh/ssh_host_ed25519_key) on our standard images were no longer automatically regenerated. This resulted in identical Ed25519 SSH host keys for each affected OS image.&lt;/code&gt; &amp;ndash; Hetzner&lt;/p&gt;

&lt;p&gt;Remember. I am the only user of this system. I decide which encryption level I want and I don&amp;rsquo;t care about backward compatibility and old SSH clients. My objective is to use the highest encryption possible, avoid downgrade attacks, make it difficult for adversaries to unencrypt my encrypted traffic. I generate and protect my own keys.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Recreate the SSH server key&lt;br /&gt;
There is no reason for your server to offer multiple keys for server authentication. The &lt;code&gt;ssh-keygen&lt;/code&gt; tool offers a number of options for the type of key to generate. My option is to always use &lt;a href=&#34;https://ed25519.cr.yp.to/&#34;&gt;ed25519&lt;/a&gt; even though RSA with a bigger key is equally secure. Mine will be called &lt;code&gt;/etc/ssh/ssh_server_ed25519&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t ed25519 -f /etc/ssh/ssh_server_ed25519 -o -a 128
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This key cannot have a passphrase. This is how SSH works. You reboot your server, SSH comes up, and it works. Make sure that the mode for the new file is 600 (-rw&amp;mdash;&amp;mdash;-).&lt;br /&gt;
Notice the &lt;code&gt;-o -a 128&lt;/code&gt; parameters. This is the number of rounds used to derive the key. The default is 16. Our powerful computers are capable of doing the math in about 2 seconds. There is a good explanation for this &lt;a href=&#34;https://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html&#34;&gt;here&lt;/a&gt;&lt;br /&gt;
To avoid misconfiguration, make sure you delete the old server keys that are already available.&lt;/p&gt;

&lt;p&gt;Also, note down the public key fingerprint of the newly generated key. The output is something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The key fingerprint is:
ed:9a:3d:e6:dd:61:4d:99:cd:68:09:6c:b0:af:e2:4e example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can verify later with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -lf /etc/ssh/ssh_server_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reconfigure &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;&lt;br /&gt;
The bulk of the configuration and explanation is here. Here is a dump of my &lt;code&gt;sshd_config&lt;/code&gt; and we will go step by step. Some of the lines are default in SSH but I want to make sure they are there and be crystal clear of their meaning.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Port 22
Protocol 2
HostKey /etc/ssh/ssh_server_ed25519
AllowGroups ssh-allowed
ClientAliveInterval 300
ClientAliveCountMax 0
KexAlgorithms curve25519-sha256@libssh.org
Ciphers chacha20-poly1305@openssh.com
MACs hmac-sha2-512-etm@openssh.com
UsePrivilegeSeparation yes
SyslogFacility AUTH
LogLevel VERBOSE
LoginGraceTime 120
PermitRootLogin no
StrictModes yes
PubkeyAuthentication yes
IgnoreRhosts yes
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication no
X11Forwarding no
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
UseLogin no
PermitTunnel no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the explanation of the important pieces:&lt;/p&gt;

&lt;p&gt;2.1) &lt;code&gt;Port 22&lt;/code&gt;&lt;br /&gt;
    Only allow connections on port 22 in all server&amp;rsquo;s interfaces. Changing this value for &amp;ldquo;security&amp;rdquo; reasons is security by obscurity and it&amp;rsquo;s ridiculous in my opinion. You&amp;rsquo;d rather use a firewall rule to filter inbound source IP addresses instead.&lt;/p&gt;

&lt;p&gt;2.2) &lt;code&gt;Protocol 2&lt;/code&gt;&lt;br /&gt;
    Because protocol 1 is fundamentally broken.&lt;/p&gt;

&lt;p&gt;2.3) &lt;code&gt;HostKey /etc/ssh/ssh_server_ed25519&lt;/code&gt;&lt;br /&gt;
    The new server key I just created.&lt;/p&gt;

&lt;p&gt;2.4) &lt;code&gt;AllowGroups ssh-allowed&lt;/code&gt;&lt;br /&gt;
    Only users from linux group &lt;code&gt;ssh-allowed&lt;/code&gt; are allowed to login through SSH. This is to protect myself from my own errors, like creating a new temporary user and affecting the security of my server.&lt;/p&gt;

&lt;p&gt;2.5) &lt;code&gt;ClientAliveInterval 300&lt;/code&gt; and &lt;code&gt;ClientAliveCountMax 0&lt;/code&gt;&lt;br /&gt;
    This is user inactivity timeout. This way enforces timeouts on the server side.&lt;/p&gt;

&lt;p&gt;2.6) &lt;code&gt;KexAlgorithms curve25519-sha256@libssh.org&lt;/code&gt;&lt;br /&gt;
    There is no reason to use multiple key exchanges algorithms. Using ECDH over Curve25519 with SHA2 is perfectly ok and I don&amp;rsquo;t want to bother with moduli bit sizes for Diffie-Hellman group exchanges.&lt;/p&gt;

&lt;p&gt;2.7) &lt;code&gt;Ciphers chacha20-poly1305@openssh.com&lt;/code&gt;&lt;br /&gt;
    This is the symmetric key used to finally encrypt the content going through between client and server. This cipher offers the best available, avoids traffic analysis and so on.&lt;/p&gt;

&lt;p&gt;2.8) &lt;code&gt;MACs hmac-sha2-512-etm@openssh.com&lt;/code&gt;&lt;br /&gt;
    For the integrity of the communication, this algorithm provides Encrypt-then-MAC with the biggest key size available.&lt;/p&gt;

&lt;p&gt;2.9) &lt;code&gt;UsePrivilegeSeparation yes&lt;/code&gt;&lt;br /&gt;
    Do not run the ssh daemon with a privileged user account. This creates unprivileged child processes to deal with network traffic. If the server is compromised through the ssh daemon, the attacker will gain unprivileged rights and will need to work harder to escalate privileges.&lt;/p&gt;

&lt;p&gt;2.10) &lt;code&gt;LogLevel VERBOSE&lt;/code&gt;&lt;br /&gt;
    We have plenty of storage, why not logging every single piece of information regarding one of the most important services in my VPS.&lt;/p&gt;

&lt;p&gt;2.11) &lt;code&gt;PermitRootLogin no&lt;/code&gt;&lt;br /&gt;
    This is the default configuration but some VPS give you remote root access by default, thus changing this to another value. You don&amp;rsquo;t want to use root for SSH. Create your own unprivileged user to connect remotely and then escalate privilege if and when necessary.&lt;/p&gt;

&lt;p&gt;2.12) &lt;code&gt;StrictModes yes&lt;/code&gt;&lt;br /&gt;
    This protects me from misconfiguration. It will check if the key file permissions and other things are properly configured.&lt;/p&gt;

&lt;p&gt;2.13) &lt;code&gt;PubkeyAuthentication yes&lt;/code&gt;&lt;br /&gt;
    Allow public key authentication. This is fundamental when disallowing password authentication.&lt;/p&gt;

&lt;p&gt;2.14) &lt;code&gt;IgnoreRhosts yes&lt;/code&gt; and &lt;code&gt;HostbasedAuthentication no&lt;/code&gt;&lt;br /&gt;
    This is default but I just want to make sure.&lt;/p&gt;

&lt;p&gt;2.15) &lt;code&gt;PasswordAuthentication no&lt;/code&gt; and &lt;code&gt;PermitEmptyPasswords no&lt;/code&gt;&lt;br /&gt;
    I want to logon using my user key and not my Linux user password.&lt;/p&gt;

&lt;p&gt;2.16) &lt;code&gt;ChallengeResponseAuthentication no&lt;/code&gt;&lt;br /&gt;
    This is a tricky one and I use them interchangeably. Even the sshd-config man page is difficult to understand. If I only want to authenticate using my user key, I set this to &lt;code&gt;no&lt;/code&gt;. Later on I discuss two-factor authentication, where this needs to be changed to &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2.17) &lt;code&gt;X11Forwarding no&lt;/code&gt;&lt;br /&gt;
    I&amp;rsquo;m not using X11, the default is &lt;code&gt;no&lt;/code&gt; already but I want to make sure.&lt;/p&gt;

&lt;p&gt;2.18) &lt;code&gt;UseLogin no&lt;/code&gt;&lt;br /&gt;
    This is the default and I want to make sure &lt;code&gt;login(1)&lt;/code&gt; is not used for user authentication.&lt;/p&gt;

&lt;p&gt;2.19) &lt;code&gt;PermitTunnel no&lt;/code&gt;&lt;br /&gt;
    This is the default but just making sure I&amp;rsquo;m only using SSH to connect to my VPS, nothing else.&lt;/p&gt;

&lt;p&gt;2.20) &lt;code&gt;UsePAM no&lt;/code&gt;&lt;br /&gt;
    This is similar to ChallengeResponseAuthentication. If I&amp;rsquo;m only using my user key to authentication, this can be &lt;code&gt;no&lt;/code&gt;. If I&amp;rsquo;m using something fancier, this is &lt;code&gt;yes&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;the-client:a6b9f62d776ebe461e78b63abd067512&#34;&gt;The Client&lt;/h2&gt;

&lt;p&gt;The client configuration somewhat follows the server configuration. You generate strong keys, you define cryptographic algorithms for everything, disable some stuff, done.&lt;/p&gt;

&lt;p&gt;But the key point here is to use different keys for different servers. In the past, I had one key and added that to authorized_keys in every single server I had access to. In the end, you have no idea where your key is, which systems you have access to, etc. The risk here is that if your private key is compromised, lost, stolen, copied by mistake on dropbox/github/USB dongle, it will be very difficult to ascertain the damage.&lt;/p&gt;

&lt;p&gt;Therefore, I propose to use one key pair per each server I manage. Yes, it overloads administrative tasks, it&amp;rsquo;s a burden, but hey, we are talking about security best practices and I don&amp;rsquo;t have access to that many servers anyway. I&amp;rsquo;m talking about my own VPS. So why not creating one separate and specific key to access it? This is also valid to services like Github and anything else that uses SSH.&lt;/p&gt;

&lt;p&gt;The file for client configuration, from a user&amp;rsquo;s perspective (not root&amp;rsquo;s perspective), is &lt;code&gt;~/.ssh/config&lt;/code&gt;. For the sake of &lt;code&gt;StrictModes&lt;/code&gt;, everything under my &lt;code&gt;.ssh&lt;/code&gt; folder has mode &lt;code&gt;0600&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Configure default behaviour in &lt;code&gt;~/.ssh/config&lt;/code&gt; file:
This needs to follow what we configured for our VPS. I want to tell my ssh client to only use that specific crypto algorithm, with that key exchange method with that specific cipher. The entry for &lt;code&gt;Host *&lt;/code&gt; provides global defaults for all hosts, so I don&amp;rsquo;t need to repeat them in every single &lt;code&gt;Host&lt;/code&gt; entry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host *
    KexAlgorithms curve25519-sha256@libssh.org
    Ciphers chacha20-poly1305@openssh.com
    MACs hmac-sha2-512-etm@openssh.com
    ForwardAgent no
    UseRoaming no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice two extra lines in this configuration:&lt;br /&gt;
1.1) &lt;code&gt;ForwardAgent no&lt;/code&gt;
    This is the default configuration but I want to make sure that if I ever use the ssh-agent to manage my private keys, I don&amp;rsquo;t want it to forward it to remote machines.&lt;/p&gt;

&lt;p&gt;1.2) &lt;code&gt;UseRoaming no&lt;/code&gt;&lt;br /&gt;
    The infamous undocumented &amp;ldquo;feature&amp;rdquo; and could expose user&amp;rsquo;s keys to attackers on a MITM scenario.&lt;/p&gt;

&lt;p&gt;This will be applied to all servers you connect from now on. If a server needs a different parameter, do it specifically for that Host. You will &lt;em&gt;quickly realize&lt;/em&gt; that this may break connectivity to some servers, &lt;em&gt;including Github&lt;/em&gt;. Below you see the example for Github and the specifics for its configuration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a key for every single server/system you have access to:
In this example, I create one to use with Github. Don&amp;rsquo;t forget to add a complex passphrase:
`&lt;code&gt;
ssh-keygen -t ed25519 -f ~/.ssh/id_ed25519_github -C &amp;quot;user@computer&amp;quot; -o -a 128
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The comment here with option &lt;code&gt;-C&lt;/code&gt; is important so you easily identify where that key belongs to. Imagine a server where you connect with 10 different machines - which public key belongs to which machine? Do this with the comment.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure &lt;code&gt;~/.ssh/config&lt;/code&gt; for this specific service:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github.com
    Hostname ssh.github.com
    Port 443
    MACs hmac-sha2-512
    IdentityFile ~/.ssh/id_ed25519_github
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is &lt;a href=&#34;https://help.github.com/articles/using-ssh-over-the-https-port/&#34;&gt;Github&amp;rsquo;s help&lt;/a&gt; on how to do it.&lt;br /&gt;
For your VPS, the process is the same. Create a new key pair, create the &lt;code&gt;Host&lt;/code&gt; block in your &lt;code&gt;~/.ssh/config&lt;/code&gt; file, add your public key to your user&amp;rsquo;s &lt;code&gt;authorized_keys&lt;/code&gt; file on the server side and you are done. Here is my entry for my own VPS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host example.com
    ServerAliveInterval 30
    StrictHostKeyChecking yes
    IdentityFile ~/.ssh/id_ed25519_example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, I add the option &lt;code&gt;StrictHostKeyChecking&lt;/code&gt; to make sure that if something happens to the server&amp;rsquo;s key - the fingerprint changed, I&amp;rsquo;m under MITM attack, whatever - I am blocked from connecting. This prevents the automatic update of my &lt;code&gt;known_hosts&lt;/code&gt; file, which could be catastrophic.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add your key to ssh-agent:
Seriously, you don&amp;rsquo;t want to keep typing in your super strong passphrase everytime you logon to your VPS. It makes it harder for attackers if your local machine is compromised and all your keystrokes are recorded. So, imagine this. Even through the attacker has a copy of your key, sees everything you type but he is not able to logon to your VPS from any other machine other than yours. Surely he could potentially add a new key to your authorized_keys on your VPS but that&amp;rsquo;s a flag right there. This is where two-factor authentication comes in.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;two-factor-authentication:a6b9f62d776ebe461e78b63abd067512&#34;&gt;Two-Factor Authentication&lt;/h2&gt;

&lt;p&gt;In my opinion, authenticating with a key that I own and protect is sufficient. Even if my private key is compromised, it is encrypted with a complex password that is difficult to brute-force. My SSH server does not allow anything other than a key to authenticate, so my local Linux user credentials is safe. I can also block source IPs temporarily if they brute-force my login using tools like &lt;a href=&#34;http://www.fail2ban.org/wiki/index.php/Main_Page&#34;&gt;fail2ban&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, there are cases where I want to use a second factor of authentication. This can be achieved with &lt;code&gt;google-authenticator&lt;/code&gt;, where you use your mobile device to generate OTP - One Time Passwords - that are necessary to authenticate alongside your key. So even though the attacker has your key and your passphrase, he cannot login because he doesn&amp;rsquo;t have your phone.&lt;/p&gt;

&lt;p&gt;In the next few post I will discuss ssh-agent and two-factor authentication further.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Collecting logs from Check Point using fw1-loggrabber</title>
      <link>http://gammenion.github.io/post/fw1-loggrabber/</link>
      <pubDate>Sat, 05 Mar 2016 14:23:22 +0100</pubDate>
      
      <guid>http://gammenion.github.io/post/fw1-loggrabber/</guid>
      <description>

&lt;h2 id=&#34;tl-dr:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;Collecting logs from Check Point firewalls is tricky. Here I managed to use the fw1-loggrabber tool running on a Linux 32bit, grab logs from a Check Point Manager Gaia R77.30, store logs in a file and use logrotate to manage them.&lt;/p&gt;

&lt;h2 id=&#34;intro:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Check Point is a wonderful product. Until you want to collect logs from it with an external tool. In my case, I need to collect logs to a Linux server so I can do some cool stuff with it. There are &lt;a href=&#34;https://www.fir3net.com/Firewalls/Check-Point/a-quick-guide-to-checkpoints-opsec-lea.html&#34;&gt;a lot&lt;/a&gt; &lt;a href=&#34;https://supportcenter.checkpoint.com/supportcenter/portal?eventSubmit_doGoviewsolutiondetails=&amp;amp;solutionid=sk32521&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://blog.rootshell.be/2014/08/28/check-point-firewall-logs-and-logstash-elk-integration/&#34;&gt;resources&lt;/a&gt; &lt;a href=&#34;http://www-01.ibm.com/support/knowledgecenter/SSSN2Y_1.0.0/com.ibm.itcim.doc/tcim85_install190.html%23opconz&#34;&gt;available&lt;/a&gt; on how to do this. Good luck with those. None of them helped me to achieve what I did in this post. That is why it is important for you to understand that this guide used Check Point Gaia R77.30. The hardware itself can be anything from a VM to a high end appliance. If you use anything else, it may work. Or it may not.&lt;/p&gt;

&lt;p&gt;To collect logs from Check Point, the fw1-loggrabber tool will be used. This is &lt;a href=&#34;https://github.com/certego/fw1-loggrabber&#34;&gt;available here&lt;/a&gt;. You can also use the version &lt;a href=&#34;http://sourceforge.net/projects/fw1-loggrabber/&#34;&gt;available on sourceforge&lt;/a&gt; but this is outdated. You can see work done in the code base of the github version. This tool only runs on Linux x86, so a Linux Ubuntu x86 was installed in the Lab Server running at 172.16.1.10 with kernel 3.16. It also runs on kernel 4. The OPSEC LEA trust must be configured between Check Point Manager and the tool. The compilation of fw1-loggrabber will not work if all the Linux dependencies are not satisfied.&lt;/p&gt;

&lt;p&gt;This exercise assumes that a lab environment is already prepared with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A Check Point Gaia R77.30 Gateway and Management. In my case, it&amp;rsquo;s a VM running both. This has IP address 172.16.1.1.&lt;/li&gt;
&lt;li&gt;A Windows client to run the Check Point SmartDashboard. In my lab this has IP address 172.16.1.11&lt;/li&gt;
&lt;li&gt;A Linux x86 client running kernel 3.16 to run the loggrabber tool. This has 172.16.1.10&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The process of creating the lab environment is up to you. If you want more information on this, leave a message below.&lt;/p&gt;

&lt;h2 id=&#34;configuring-check-point:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;Configuring Check Point&lt;/h2&gt;

&lt;p&gt;First we need to configure the Check Point Management server to accept the OPSEC LEA connection. This is how to achieve this.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Log in to SmartDashboard as an admin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a Host object for the Linux server that will collect the logs:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/01.png&#34; /&gt;
    
    
&lt;/figure&gt;

My Linux server is 172.16.1.10:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/02.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create the OPSEC object:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the &amp;ldquo;Servers and OPSEC&amp;rdquo; tab and right-click on the folder &amp;ldquo;OPSEC Application&amp;rdquo;. Create a &amp;ldquo;New OPSEC Application&amp;rdquo;:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/03.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Configure the OPSEC object. Give it a name, select the Host you just created for the Linux server and select the option LEA:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/04.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Click on Communication and set up a new SIC one-time password. Bear in mind that once you do this, the access would be already available, no policy pushes required:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/05.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You may want to add a rule to allow the OPSEC LEA connection from the linux server to the Check Point gateway using TCP/18184 (FW1_lea)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From 172.16.1.10 to 172.16.1.1 on port TCP/18184&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;configuring-linux:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;Configuring Linux&lt;/h2&gt;

&lt;p&gt;I am using a Debian 8.2 in the lab:

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/06.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;
The fw1-loggrabber tool needs to be compiled from source. Let&amp;rsquo;s use linux user &lt;code&gt;user&lt;/code&gt; and the tool folder &lt;code&gt;/home/user/fw1-loggrabber&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Before using the tool, the following dependencies must be installed. This will probably tell you to install many more packages but it depends on the Linux server being used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~$ apt-get install git gcc-multilib g++-multilib libelf-dev:i386
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the code for the tool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~$ mkdir fw1-loggrabber; cd fw1-loggrabber
user@debian:~/fw1-loggrabber$ git clone https://github.com/certego/fw1-loggrabber
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make the fw1-loggrabber source code be downloaded under &lt;code&gt;/home/user/fw1-loggrabber/fw1-loggrabber&lt;/code&gt;. Once it&amp;rsquo;s finally installed, all these folders may be cleaned up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the necessary OPSEC development libraries from &lt;a href=&#34;supportcontent.checkpoint.com/file_download?id=7385&#34;&gt;Check Point here&lt;/a&gt;. Upload the file OPSEC_SDK_6.0_Linux.zip to the &lt;code&gt;/home/user/fw1-loggrabber&lt;/code&gt; folder and unzip it. This is required to compile fw1-loggrabber.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/fw1-loggrabber$ unzip OPSEC_SDK_6.0_Linux.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This zip contains the linux SDK on file &lt;code&gt;OPSEC_SDK_6_0.linux30.tar.gz&lt;/code&gt;. This file needs to be unziped in the same folder as fw1-loggrabber with command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/fw1-loggrabber$ tar zxvf OPSEC_SDK_6_0.linux30.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The files are extracted in folder &lt;code&gt;pkg_rel&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compile fw1-loggrabber. But first, go to &lt;code&gt;/home/user/fw1-loggrabber/fw1-loggrabber&lt;/code&gt; and change this line in the &lt;code&gt;Makefile&lt;/code&gt; file to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PKG_DIR = ../pkg_rel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then finally compile the code and install it so you can use the fw1-loggrabber afterwards:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/fw1-loggrabber/fw1-loggrabber$ make
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/07.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;pre&gt;&lt;code&gt;user@debian:~/fw1-loggrabber/fw1-loggrabber$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/08.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;
The fw1-loggrabber tool is installed under &lt;code&gt;/usr/local/fw1-loggrabber/&lt;/code&gt;. When this is done, everything inside &lt;code&gt;/home/user/fw1-loggrabber/&lt;/code&gt; can be deleted with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/fw1-loggrabber/fw1-loggrabber$ cd
user@debian:~$ rm -rf fw1-loggrabber/*
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download the opsec-tools &lt;a href=&#34;http://sourceforge.net/projects/fw1-loggrabber/files/opsec-tools/NG-FP3/&#34;&gt;from here&lt;/a&gt;. This tool is used to integrate the Linux server with the Check Point Management server by supplying it the SIC. This tool is already compiled for Linux 32bit. Upload the downloaded file &lt;code&gt;opsec-tools.tar.gz&lt;/code&gt; to the home folder &lt;code&gt;/home/user/&lt;/code&gt; and unzip it. This tool can be used again later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/$ tar zxvf opsec-tools.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrate the Linux server with the Check Point Manager via OPSEC by running the opsec-tools tool. This generates a TCP connection from the Linux server to the Check Point Manager on port TCP/18210 (FW1-ica-pull). For this, we will need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The IP address of the Check Point Manager = 172.16.1.1. This goes in option &lt;code&gt;-h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The OPSEC object name that was created = LogGrabberOPSEC. This goes in option &lt;code&gt;-n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The password that was set for the communication (SIC). This goes in option &lt;code&gt;-p&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~$ cd opsec-tools/linux22
user@debian:~/opsec-tools/linux22$ opsec_pull_cert -h 172.16.1.1 -n LogGrabberOPSEC -p &amp;lt;PASSWD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result in the shell:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/09.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The output of this command gives us two fundamental pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The opsec.p12 file: it&amp;rsquo;s the certificate used for communication between the two servers&lt;/li&gt;
&lt;li&gt;The Common Name (CN) of the certificate that is required by fw1-loggrabber. In this case, it is &lt;code&gt;CN=LogGrabberOPSEC,O=gw..n7symj&lt;/code&gt;. Now we have everything required to use the fw1-loggrabber tool.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the &lt;code&gt;opsec.p12&lt;/code&gt; file to the fw1-loggrabber working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/opsec-tools/linux22$ cp opsec.p12 /home/user/fw1-loggrabber
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the LEA configuration file. First, copy the sample to the working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~$ cp /usr/local/fw1-loggrabber/etc/lea.conf-sample /home/user/fw1-loggrabber/lea.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the parameters inside the lea.conf file to what we grabbed before:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lea_server ip&lt;/code&gt; is the IP of the Check Point Manager: 172.16.1.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opsec_sic_name&lt;/code&gt; is the CN of the certificate that has been downloaded by the opsec-tool: &lt;code&gt;CN=LogGrabberOPSEC,O=gw..n7symj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opsec_sslca_file&lt;/code&gt; is the path to the opsec.p12 file downloaded by the opsec-tool: &lt;code&gt;/home/user/fw1-loggrabber/opsec.p12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lea_server opsec_entity_sic_name&lt;/code&gt; is the Distinguished Name (DN) for the Check Point Manager certificate. This can be grabbed by going to Check Point SmartDashboard and editing the Check Point Manager object and clicking on Test SIC Status:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/10.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;
The DN can be found where it is highlighted below:&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;http://gammenion.github.io/img/11.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;br /&gt;
In this case, it is &lt;code&gt;cn=cp_mgmt,o=gw..n7symj&lt;/code&gt;. Finally, the lea.conf file has the following content:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;lea_server auth_type sslca
lea_server ip 172.16.1.1
lea_server auth_port 18184
opsec_sic_name &amp;quot;CN=LogGrabberOPSEC,O=gw..n7symj&amp;quot;
opsec_sslca_file /home/user/fw1-loggrabber/opsec.p12
lea_server opsec_entity_sic_name &amp;quot;cn=cp_mgmt,o=gw..n7symj&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It&amp;rsquo;s time to finally configure the fw1-loggrabber tool and supply the OPSEC LEA parameters. For simplicity, I use the default configuration file for fw1-loggrabber available in &lt;code&gt;/usr/local/fw1-loggrabber/etc/&lt;/code&gt;. Copy the configuration file to the working directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~$ cp /usr/local/fw1-loggrabber/etc/fw1-loggrabber.conf-sample /home/user/fw1-loggrabber/fw1-loggrabber.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I do minor tweats to this file but the documentation is pretty good in their &lt;a href=&#34;https://github.com/certego/fw1-loggrabber&#34;&gt;github repository&lt;/a&gt;. The following is the configuration file I use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEBUG_LEVEL=&amp;quot;0&amp;quot;
FW1_LOGFILE=&amp;quot;fw.log&amp;quot;
FW1_OUTPUT=&amp;quot;logs&amp;quot;
FW1_TYPE=&amp;quot;ng&amp;quot;
FW1_MODE=&amp;quot;normal&amp;quot;
ONLINE_MODE=&amp;quot;yes&amp;quot;
RESOLVE_MODE=&amp;quot;no&amp;quot;
RECORD_SEPARATOR=&amp;quot;|&amp;quot;
DATEFORMAT=&amp;quot;std&amp;quot;
LOGGING_CONFIGURATION=file
OUTPUT_FILE_PREFIX=&amp;quot;fw1-loggrabber&amp;quot;
OUTPUT_FILE_ROTATESIZE=1048576
SYSLOG_FACILITY=&amp;quot;LOCAL1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the tool. Notice that with this configuration file the output file will be saved at &lt;code&gt;fw1-lograbber.conf&lt;/code&gt;. If the tool runs correctly, the logs will be collected from the Check Point Manager indefinitely. Do yourself a favor and add the fw1-loggrabber executable to your PATH environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@debian:~/fw1-loggrabber$ /usr/local/fw1-loggrabber/bin/fw1-loggrabber -c fw1-loggrabber.conf -l lea.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;extras:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;Extras&lt;/h2&gt;

&lt;h3 id=&#34;log-volume:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;Log Volume&lt;/h3&gt;

&lt;p&gt;Depending on your Check Point installation, the log volume can be humongous. I don&amp;rsquo;t really want to have gigabytes of logs in one file. Logrotate is your friend.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/home/user/fw1-loggrabber/fw1-loggrabber.log{
   size 100M
   compress
   compresscmd /usr/bin/xz
   compressext .xz
   rotate 1
   copytruncate
   nocreate
   su user user
   missingok
   notifempty
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With logrotate&amp;rsquo;s &lt;code&gt;lastaction&lt;/code&gt; directive, you can do nice things to your log file, like stashing it for offline backup or anything else, let&amp;rsquo;s say, send to your AWS bucket.&lt;/p&gt;

&lt;h3 id=&#34;extra-configuration-parameters:3780de4ec6e539fd9e79f53f296c60bf&#34;&gt;Extra configuration parameters&lt;/h3&gt;

&lt;p&gt;You will quickly realize that the log file is poluted by repetitive and useless fields. I added the following line to the configuration file to remove annoying fields. Bear in mind these fields are not documented anywhere. Please let me know if they are.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IGNORE_FIELDS=i/f_dir;i/f_name;has_accounting;uuid;product;__policy_id_tag;origin_sic_name;rule_uid;app_desc;app_id;app_category;matched_category;app_properties;app_rule_id;app_rule_name;app_sig_id;UserCheck_incident_uid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I tried using the FW1_FILTER_RULE but it is so limited I gave up.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>